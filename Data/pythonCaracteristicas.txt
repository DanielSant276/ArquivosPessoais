Enumerate:
  - Ao invés de utilizar um for com um valor range(len(variavel)), podemos apenas usar o enumerate, que gera um objeto 
  com um index seguindo uma ordem. Ex.:
      name = ['daniel', 'ayrton', 'lucas']
      for i in enumerate(name):
        print(i) #(0, 'daniel'),(1, 'ayrton'),(2, 'lucas') 

Zip e Descompactação (pág. 38):
  - O zip é compactar duas ou mais listas, ela transforma vários iteráveis em um só iterável de tuplas.
  - Para descompatar uma lista, se utiliza o *. Ex.:
      compactando:
      list1 = ['a', 'b', 'c']
      list2 = [1, 2, 3]
      pairs = [pair for pair in zip()] #[('a', 1), ('b', 2), ('c', 3)]
      
      descompactando:
      letters, numbers = zip(*pairs) #('a', 'b', 'c')(1, 2, 3)

Args e Keywargs (pág. 38):
  - Os args (parâmetro *args) serve para passar diversos valores como parâmetro de uma função em formato de lista.
  - Os kwargs funcionam da mesma forma mas elas servem para criar um dicionário ao invés de uma lista. Ex.:
    def kwargs(**kwargs):
      print(kwargs)
    kwargs(nome="daniel", idade="26", hobbie="jogar jrpg") #{'nome': 'daniel', 'idade': '26', 'hobbie': 'jogar jrpg'}
