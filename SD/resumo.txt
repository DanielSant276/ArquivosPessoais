		Aula 01

Sistemas distribuidos: conjunto de computadores independentes que funcionam em conjunto (sistema único e coerente (cada uma das partes é ligada ao todo sem que ocorram contradições)).

Middleware: Ele auxilia a melhorar a visão de um sistema único que um sistema distribuido deve ter. É uma cada lógica acima dos sistemas operacionais e abaixo dos usuários e das aplicações. Seu objetivo é facilitar o acesso e o compartilhamento de recursos de maneira controlada e eficiente.

Acesso a Recursos: É necessário uma boa segurança, de forma que seja evitado o acesso indevido e rastreamento de comunicações para a criação de perfis de usuários.

Transparência:
	- Acesso: oculta diferenças entre as arquiteturas de máquinas, precisando sempre representar com conformidade os dados e e o acesso a um recurso;
	- Localização: oculta o lugar em que um recurso está localizado, não permitindo o usuário saber a localização física do recurso do sistema;
	- Migração: oculta que um recurso pode ser movido para outra localização, não afetando a utilização do sistema caso ele não se encontre no local de costume;
	- Relocação: oculta que um recurso pode ser movido para uma outra localização enquanto em uso, não afetando como eles estão sendo usados;
	- Replicação: oculta que um recurso é possui diversas copias, colocando o mesmo nome em todas as copias. Normalmente sistemas que suportam transparência de replicação possuem também transparência de localização;
	- Concorrência: oculta que um recurso pode ser compartilhado por diversos usuário concorrentes, de forma que um usuário não é capaz de saber que outro está usando o mesmo recurso. É utilizado travas de acesso, permitindo acesso exclusivo a um recurso desejado por vez;
	- Falha: oculta a falha e a recuperação de um recurso, mascarando que um recurso deixou de funcionar ou que um sistema se recuperou de uma falha;

Abertura: É um sistema que oferece serviços de acordo com regras padronizadas que descrevem a sintaxe e a semântica desses serviços. (Não entendi)
	- Sintaxe: nomes de funções, tipos de parâmetros, valores de retorno e excessões que podem surgir;
	- Semântica: utiliza linguagem natural;
	As especificações pode ser:
	- Completas: indica tudo o que é necessário para uma implmentação;
	- Neutras: as especificações não indicam como deve ser a aparência da implementação;
	Completude e neutralidade são importantes para:
	- Interoperabilidade: até quanto duas implementações devem coexistir/trabalhar em conjunto.
	- Portabilidade: até que ponto uma aplicação desenvolvida para A pode ser executada sem modificações em B.
	- Extensível: ser fácil de adicionar ou substituir partes sem afetar as que continuam no mesmo lugar.

Escalabilidade.	Podem ser de três tipos:
	- Tamanho: Consegue adicionar mais usuário e recusros ao sistema;
	- Geográficos: Usuário e recursos podem estar em localizações diferentes;
	- Administrativos: É fácil gerenciar o sistema mesmo que ele faça parte de muitas organizações administrativas diferentes;

Problemas de escalabilidade:
	- Tamanho: Conforme aumenta o número de usuários e recursos, começa a ficar limitado os serviços, dados e algoritmos centralizados.
		-- Serviços centralizados: a medida que cresce o número de usuários e aplicações o armazenamento e o processamento diminui. Porém vários servidores diminuem a segurança pois é mais difícil de gerenciar.
		-- Dados centralizados: um único banco de dados para armazenar muitos valores saturam as linhas de comunicação de acesso ao servidor.
		-- Algoritmos centralizados: as maquinas não tem todas as informações do estado do sistema, tomando decisões apenas com as informações locais. Assim, a falha de uma máquina não da problema no algoritmo. 
	- Geográfica: É difícil uma comunicação síncrona para grandes distâncias. A comunicação em redes de longa distância não é confiável. A centralização atrapalha a escalabilidade de tamanho.
	- Administrativa: É difícil estabelecer políticas de uso e pagamento de: recursos, gerenciamento e segurança.

Técnicas de escalabilidade:
	Podem ser de 3 tipos:
	- Latências de comunicação: evita esperar por respostas a requisições remotas;
	- Distribuição: divide um componente em partes menores e espalha esses componente pelo sistema;
	- Replicação: maior disponibilidade, divide a carga e diminui a latência por ter cópias por perto;

Tipos de sistemas distribuídos:
	- Cluster: Conjunto de estações de trabalho semelhantes, conectados por rede local de alta velocidade. Usado para computação paralela em que um programa é executado em várias máquinas, de forma homogênea.

Sistemas distribuidos pervasivos:
	São sistemas que utilizam computação móvel e embutida, onde o funcionamento é instável. Eles geralmente são: pequenos, utilizam baterias móveis e usam comunicação sem fio. Eles não possuem um controle humano, podendo assim mudar o seu comportamento a todo tempo. 